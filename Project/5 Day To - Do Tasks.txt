Day 1 – Setup & API Integration

Choose OpenWeatherMap (free tier gives current + 5-day forecast).

Create a simple FastAPI/Flask project.

Add endpoint: /weather?city=London → fetch real-time data from OpenWeatherMap.

Return JSON response directly (no DB yet).

✅ Deliverable: A working API wrapper around OpenWeatherMap.

📅 Day 2 – SQL Database Integration

Setup PostgreSQL/MySQL (can run inside Docker).

Create table weather_logs (id, city, temp, humidity, timestamp).

Store daily/hourly weather snapshots in SQL.

Add endpoint: /weather/history?city=London.

✅ Deliverable: Structured storage & retrieval in SQL.

📅 Day 3 – MongoDB Integration

Setup MongoDB (also via Docker).

Store raw JSON responses from the weather API (because JSON is unstructured).

Endpoint: /weather/raw?city=London → fetches raw data from Mongo.

Compare SQL vs Mongo for:

Query speed

Storage size

Data flexibility

✅ Deliverable: Weather data stored in both SQL + Mongo for benchmarking.

📅 Day 4 – Dockerize the System

Write Dockerfile for the FastAPI/Flask app.

Use docker-compose.yml to run:

App container

PostgreSQL/MySQL container

MongoDB container

✅ Deliverable: One command (docker-compose up) runs the full stack.

📅 Day 5 – Performance Benchmark + Extensions

Benchmark SQL vs Mongo queries:

Insert speed (many cities at once).

Query speed (fetch last 7 days for a city).

Storage space.

Expose results via /performance/report.

Optional extension:

Add GPT layer to summarize trends → “In London, this week was 2°C warmer than last week.”

✅ Deliverable: Working system + report.
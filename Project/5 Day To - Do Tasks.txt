Day 1 – Console application

Choose OpenWeatherMap 
setup a console application
Return JSON response directly (no DB yet).

✅ Deliverable: A working console application around OpenWeatherMap.



Day -2 - API setup


API Setup with meaningful endpoints


Probable end points - 
1. healthcheck
2. get 24 hr forecast for one city
3. get 24 hr forecast for multiple cities
4. save weather report
5. get saved report
6. delete saved report
7. compare db performance


📅 Day 3 – SQL Database Integration

Setup PostgreSQL/MySQL (can run inside Docker).

Create table weather_logs (id, city, temp, humidity, timestamp).

Store daily/hourly weather snapshots in SQL.

Add endpoint: /weather/history?city=London.

✅ Deliverable: Structured storage & retrieval in SQL.



📅 Day 4 – MongoDB Integration

Setup MongoDB (also via Docker).

Store raw JSON responses from the weather API (because JSON is unstructured).

Endpoint: /weather/raw?city=London → fetches raw data from Mongo.

Compare SQL vs Mongo for:

Query speed

Storage size

Data flexibility

✅ Deliverable: Weather data stored in both SQL + Mongo for benchmarking.

📅 Day 5 – Dockerize the System

Write Dockerfile for the FastAPI app.

Use docker-compose.yml to run:

App container

PostgreSQL/MySQL container

MongoDB container

✅ Deliverable: One command (docker-compose up) runs the full stack.

📅 Day 6 – Performance Benchmark + Extensions

Benchmark SQL vs Mongo queries:

Insert speed (many cities at once).

Query speed (fetch last 7 days for a city).

Storage space.

Expose results via /performance/report.

Optional extension:

Add GPT layer to summarize trends → “In London, this week was 2°C warmer than last week.”

✅ Deliverable: Working system + report.